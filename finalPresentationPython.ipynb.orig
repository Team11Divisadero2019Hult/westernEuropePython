{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python Final Project "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading Data and Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Read Excel\n",
    "regions = pd.read_excel('WDIW.xlsx')\n",
    "\n",
    "# Filter countries by team cool name \n",
    "jetFire = regions[regions['Cool Name'] == 'Jetfire' ]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Number of missing values\n",
    "\n",
    "# Number of null values aggregated by sum\n",
    "missingSorted = jetFire.isnull().agg('sum').sort_values(ascending=False)\n",
    "\n",
    "# More than 0 values, a total of 54 columns\n",
    "missingAtLeastOne = missingSorted[missingSorted > 0]\n",
    "\n",
    "# View Informations\n",
    "missingAtLeastOne"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Missing Values "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Strategy 1: Finding the values in World Bank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "#### Diego"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "##### Subsetting the countries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# 6 Countries of Diego\n",
    "diegoCols = ['ITA','LIE','LUX','MCO','NLD','PRT']\n",
    "\n",
    "# Subset of Countr - dies\n",
    "diegoDf = jetFire[jetFire['Country Code'].isin(diegoCols)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "##### Checking Missing Values per countries\n",
    "\n",
    "How many Missing values each country has?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Checking mssing values per countries\n",
    "diegoTranspose = diegoDf.transpose()\n",
    "\n",
    "diegoTranspose.columns = diegoCols\n",
    "\n",
    "diegoMissingSorted = (diegoTranspose.isnull().sum().sort_values(ascending = False) / len(diegoTranspose)) * 100\n",
    "\n",
    "diegoMissingSorted\n",
    "\n",
    "# Monaco, liechtenstein, Luxemburg, Portugal, Netherlands, Italy "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "##### Missing Values per Column\n",
    "How many missing values each indicator has?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Checking missing values per Column\n",
    "diegoMissingCols = diegoDf.isnull().sum().sort_values(ascending = False)\n",
    "\n",
    "# 68 indicators\n",
    "print(f'Matrix Shape: {diegoDf.shape}') \n",
    "\n",
    "# Indicators with 100% missing values\n",
    "print(diegoMissingCols[diegoMissingCols == 6])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "##### More detailed inspection of missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Indicators with 2 and 3 missing datapoints\n",
    "\n",
    "diegoMissingCols[diegoMissingCols < 6][diegoMissingCols > 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Only one missing value\n",
    "diegoMissingCols[diegoMissingCols >= 1 ][diegoMissingCols < 2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "##### Missing Values by Country Data Frame\n",
    "This data frame is composed of indicators with at least 1 missing value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Subset indicators with at least 1 missing value. This is a boolean DataFrame\n",
    "diegoMissingBool = diegoDf[diegoMissingCols[diegoMissingCols >= 1].index].isnull().copy()\n",
    "\n",
    "# Is null is created again to have the indices, I did this the first time \n",
    "# mask = diegoMissingBool.isnull().any()\n",
    "# diegoMissingbyCountry = diegoDf[mask.index.copy()]\n",
    "\n",
    "# A more elegant way: \n",
    "\n",
    "diegoMissingbyCountry = diegoDf[diegoMissingBool.columns.copy()]\n",
    "\n",
    "\n",
    "# Created Country code column in order to add it as an index\n",
    "diegoMissingbyCountry.loc[:,'CountryCode'] = diegoDf['Country Code'].copy()\n",
    "\n",
    "# modified index to have the country code. Easier subsetting!\n",
    "diegoMissingbyCountry = diegoMissingbyCountry.set_index('CountryCode').copy()\n",
    "\n",
    "# The final dataframe contains the dataframe that has missing values \n",
    "diegoMissingbyCountry\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "##### Worldbank API - Easy webscraping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import world_bank_data as wb\n",
    "\n",
    "# It's necessary to get the indicators code, this is different from the column names. \n",
    "    # E.g: Income share held by fourth 20% is coded as: SI.DST.04TH.20\n",
    "    \n",
    "missingIndicators = diegoMissingCols[diegoMissingCols >= 1].index.copy()\n",
    "\n",
    "# Created empty dataframe with the column format that the API will return\n",
    "    # We just need to append in a simple loop\n",
    "indicatorsCodedMissing = pd.DataFrame(columns = ['name', 'unit', 'source', 'sourceNote', 'sourceOrganization', 'topics'])\n",
    "\n",
    "# Loop to get the missing indicators and store the in the indicatorsCodedMissing data frame\n",
    "for i in list(missingIndicators):\n",
    "    indicatorsCodedMissing = indicatorsCodedMissing.append(wb.search_indicators(i))\n",
    "\n",
    "# We can view the first the indicator names\n",
    "print(f'{indicatorsCodedMissing.index[0:3]} \\n')\n",
    "\n",
    "# We can view the head of the dataframe as well, we have really interesting info! \n",
    "indicatorsCodedMissing.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Now we obtain the data for the specific countries that we need\n",
    "\n",
    "import wbdata\n",
    "from datetime import datetime\n",
    "\n",
    "# missingIndicators = diegoMissingCols[diegoMissingCols > 1] \n",
    "\n",
    "# The indicators argument of get_dataframe needs to be a dictionary with \n",
    "    # the codes (previous step) as the key and the new column names as the values (missing Indicators)\n",
    "    # The output is a dataframe, notice that it has hierarchical indexing or multindexing (it makes it more fun and useful)\n",
    "    # It will return the Data frame with all the years in the world bank \n",
    "    \n",
    "keys = list(indicatorsCodedMissing.index)\n",
    "values = list(missingIndicators) \n",
    "\n",
    "\n",
    "wbQueriedDiego = wbdata.get_dataframe(indicators = dict(zip(keys,values)), country = diegoCols, convert_date = False)\n",
    "\n",
    "wbQueriedDiego.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Now we subset for a particular year\n",
    "\n",
    "wbQueriedDiego.sort_index(inplace=True)\n",
    "\n",
    "# What is the total of missing values that there are per year \n",
    "for i in range(2013,2019,1):\n",
    "    print('{} missing values out of {} for year {} '.format(wbQueriedDiego.xs(str(i),level='date'). \n",
    "                                                            transpose().isnull().sum().sum(), # Calculates overall sum of null values\n",
    "                                                            wbQueriedDiego.shape[1] * len(wbQueriedDiego.index.levels[0]), # Number of columns * number of countries = total possible missing values \n",
    "                                                i) # ith year \n",
    "        )\n",
    "\n",
    "# It seems that 2015 is the most non-missing updated info that we can obtain \n",
    "\n",
    "# data for 2015 is queried\n",
    "wbQueriedDiego2015 = wbQueriedDiego.xs('2015',level='date')\n",
    "\n",
    "# Printing the data frame to know the contents\n",
    "wbQueriedDiego2015\n",
    "\n",
    "# saving it to excel\n",
    "   \n",
    "# wbQueriedDiego2015.to_excel('worldBank2015DiegoCountries.xlsx')  # This is commented so I don't overwrite by mistake the file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Global Missing Values Analysis "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### API call for Global Missing Values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Read Excel\n",
    "regions = pd.read_excel('WDIW.xlsx')\n",
    "\n",
    "# Filter countries by team cool name \n",
    "jetFire = regions[regions['Cool Name'] == 'Jetfire' ]\n",
    "\n",
    "# Copy original dataset for missingValues treatment\n",
    "missingValuesDf = jetFire.copy()\n",
    "\n",
    "# Checking missing values per countries\n",
    "missingValuesDfTranspose = missingValuesDf.transpose()\n",
    "\n",
    "missingValuesDfTranspose.columns = missingValuesDf['Country Code']\n",
    "\n",
    "missingValuesSortedByCountry = (missingValuesDfTranspose.isnull().\n",
    "                                sum().\n",
    "                                sort_values(ascending = False) / len(missingValuesDfTranspose)) * 100\n",
    "\n",
    "missingValuesSortedByCountry\n",
    "\n",
    "# NEW CELLL\n",
    "\n",
    "\n",
    "# Checking missing values per Column\n",
    "missingValuesByColumn = missingValuesDf.isnull().\\\n",
    "                        sum().sort_values(ascending = False)\n",
    "\n",
    "# 68 indicators\n",
    "print(f'Original Matrix Shape: {missingValuesDf.shape}') \n",
    "\n",
    "missingValuesByColumn\n",
    "\n",
    "# Indicators with 100% missing values\n",
    "print(missingValuesByColumn[missingValuesByColumn == 22])\n",
    "\n",
    "# NEW CELL\n",
    "\n",
    "# Missing Values less than 22 \n",
    "\n",
    "missingValuesByColumn[missingValuesByColumn < 22]\n",
    "\n",
    "\n",
    "# Visualize distribution of missing values by column \n",
    "missingValuesByColumn[missingValuesByColumn].plot.box()\n",
    "\n",
    "# Visualize distribution of missing values by column except 100% missing values (< 22)\n",
    "# Notice how the distribution change if we don't include the 22 missing values\n",
    "missingValuesByColumn[missingValuesByColumn < 22].plot.box()\n",
    "\n",
    "# NEXT CELL \n",
    "\n",
    "\n",
    "\n",
    "# Subset indicators with at least 1 missing value. This is a boolean DataFrame\n",
    "missingValuesBool = missingValuesDf[missingValuesByColumn[missingValuesByColumn >= 1].index].isnull().copy()\n",
    "\n",
    "# Is null is created again to have the indices, I did this the first time \n",
    "# mask = diegoMissingBool.isnull().any()\n",
    "# diegoMissingbyCountry = diegoDf[mask.index.copy()]\n",
    "\n",
    "# A more elegant way: \n",
    "# Extracting from the original values the name of the columns that have at least 1 N/A\n",
    "missingValuesSubset = missingValuesDf[missingValuesBool.columns.copy()]\n",
    "\n",
    "\n",
    "# Created Country code column in order to add it as an index\n",
    "missingValuesSubset.loc[:,'CountryCode'] = missingValuesDf['Country Code'].copy()\n",
    "\n",
    "# modified index to have the country code. Easier subsetting!\n",
    "missingValuesSubset = missingValuesSubset.set_index('CountryCode').copy()\n",
    "\n",
    "# The final dataframe contains the dataframe that has missing values \n",
    "missingValuesSubset\n",
    "\n",
    "\n",
    "# NEXT CELL\n",
    "\n",
    "def extractAllIndicators():\n",
    "    import world_bank_data as wb\n",
    "\n",
    "    # It's necessary to get the indicators code, this is different from the column names. \n",
    "        # E.g: Income share held by fourth 20% is coded as: SI.DST.04TH.20\n",
    "\n",
    "    missingIndicators = missingValuesByColumn[missingValuesByColumn >= 1].index.copy()\n",
    "\n",
    "\n",
    "    # Created empty dataframe with the column format that the API will return\n",
    "        # We just need to append in a simple loop\n",
    "    indicatorsCodedMissing = pd.DataFrame(columns = ['name', 'unit', 'source', 'sourceNote', 'sourceOrganization', 'topics'])\n",
    "\n",
    "\n",
    "    # Loop to get the missing indicators and store the in the indicatorsCodedMissing data frame\n",
    "    for i in list(missingIndicators):\n",
    "        indicatorsCodedMissing = indicatorsCodedMissing.append(wb.search_indicators(i))\n",
    "\n",
    "    # We can view the first the indicator names\n",
    "#     print(f'{indicatorsCodedMissing.index[0:3]} \\n')\n",
    "\n",
    "    # We can view the head of the dataframe as well, we have really interesting info! \n",
    "#     indicatorsCodedMissing.head()\n",
    "\n",
    "    # Shape of matrix \n",
    "#     indicatorsCodedMissing.shape\n",
    "\n",
    "    return indicatorsCodedMissing\n",
    "\n",
    "# Now we obtain the data for the specific countries that we need\n",
    "\n",
    "import wbdata\n",
    "from datetime import datetime\n",
    "\n",
    "# missingIndicators = diegoMissingCols[diegoMissingCols > 1] \n",
    "\n",
    "# The indicators argument of get_dataframe needs to be a dictionary with \n",
    "    # the codes (previous step) as the key and the new column names as the values (missing Indicators)\n",
    "    # The output is a dataframe, notice that it has hierarchical indexing or multindexing (it makes it more fun and useful)\n",
    "    # It will return the Data frame with all the years in the world bank \n",
    "    \n",
    "keys = list(indicatorsCodedMissing.index)\n",
    "values = list(missingIndicators) \n",
    "\n",
    "\n",
    "wbQueriedAll = wbdata.get_dataframe(indicators = dict(zip(keys,values)), country = list(missingValuesDf.index), \n",
    "\tconvert_date = False)\n",
    "\n",
    "wbQueriedAll.head()\n",
    "# Save to csv\n",
    "# wbQueriedAll.to_csv('wbQueriedAll.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "#### Read saved csv with missing indicators. \n",
    "Csv from section 1.2.2.1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "wbQueriedAll = pd.read_csv('missingValuesAnalysis/wbQueriedAll.csv', index_col = [0,1],skipinitialspace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Now we subset for a particular year\n",
    "\n",
    "wbQueriedAll.sort_index(inplace=True)\n",
    "\n",
    "# What is the total of missing values that there are per year \n",
    "for i in range(2013,2019,1):\n",
    "    print('{} missing values out of {} for year {} '.format(wbQueriedAll.xs(i,level='date'). \n",
    "                                                            transpose().isnull().sum().sum(), # Calculates overall sum of null values\n",
    "                                                            wbQueriedAll.shape[1] * len(wbQueriedAll.index.levels[0]), # Number of columns * number of countries = total possible missing values \n",
    "                                                i) # ith year \n",
    "        )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Download all data from all the country and all the indicators\n",
    "The saved dataframe is called wbQueriedAllFull.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "allIndicators = list(jetFire.columns[6:])\n",
    "allCountries = list(jetFire['Country Code'])\n",
    "\n",
    "import world_bank_data as wb\n",
    "\n",
    "indicatorsCodedAll = pd.DataFrame(columns = ['name', 'unit', 'source', 'sourceNote', 'sourceOrganization', 'topics'])\n",
    "\n",
    "# There is a bug using the search_indicators method, it didn't return the proper searched indicators\n",
    "# Loop to get the missing indicators and store the in the indicatorsCodedMissing data frame\n",
    "# for i in allIndicators:\n",
    "#     indicatorsCodedAll = indicatorsCodedAll.append(wb.search_iwb.get_indicators()\n",
    "\n",
    "\n",
    "# Debugged way: \n",
    "universalIndicators = wb.get_indicators(source = 2)\n",
    "\n",
    "for indicator in allIndicators:\n",
    "    indicatorsCodedAll = indicatorsCodedAll.append(universalIndicators[universalIndicators['name'] == indicator])\n",
    "\n",
    "\n",
    "# We can view the first the indicator names\n",
    "print(f'{indicatorsCodedAll.index[0:3]} \\n')\n",
    "\n",
    "# We can view the head of the dataframe as well, we have really interesting info! \n",
    "indicatorsCodedAll.head()\n",
    "\n",
    "# Shape of matrix \n",
    "indicatorsCodedAll.shape\n",
    "\n",
    "# \n",
    "\n",
    "# Now we obtain the data for the specific countries that we need\n",
    "\n",
    "import wbdata\n",
    "from datetime import datetime\n",
    "\n",
    "# missingIndicators = diegoMissingCols[diegoMissingCols > 1] \n",
    "\n",
    "# The indicators argument of get_dataframe needs to be a dictionary with \n",
    "    # the codes (previous step) as the key and the new column names as the values (missing Indicators)\n",
    "    # The output is a dataframe, notice that it has hierarchical indexing or multindexing (it makes it more fun and useful)\n",
    "    # It will return the Data frame with all the years in the world bank \n",
    "    \n",
    "keys = list(indicatorsCodedAll.index)\n",
    "values = allIndicators\n",
    "\n",
    "\n",
    "wbQueriedAllFull = wbdata.get_dataframe(indicators = dict(zip(keys,values)), country = allCountries, \n",
    "\tconvert_date = False)\n",
    "\n",
    "wbQueriedAllFull.head()\n",
    "# Save to csv\n",
    "# wbQueriedAllFull.to_csv('wbQueriedAllFull.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read all years/countries dataset\n",
    "#### Find which years have the least amount of values\n",
    "#### Save the dataset of all the indicators for year 2017\n",
    "This is the previous dataset wbQueriedAllFull.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "wbQueriedAllFull = pd.read_csv('wbQueriedAllFull.csv', dtype={'date':str}, index_col=['country','date'])\n",
    "\n",
    "\n",
    "for i in range( 2010, 2019):\n",
    "    print(i,'-',(wbQueriedAllFull.xs(i,level='date').isnull().sum().sum() / len(wbQueriedAllFull) *100 ).round(2), '%' )\n",
    "\n",
    "\n",
    "# wbFull2017 = wbQueriedAllFull.xs(2017,level='date')\n",
    "\n",
    "# wbFull2017.to_csv('wbFull2017.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find missing values of 2017\n",
    "\n",
    "The NAs of 2017 will be looked from 2019 to 2015"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "try:\n",
    "    wbQueried2019 = wbQueriedAllFull.xs('2019',level='date')\n",
    "    wbQueried2018 = wbQueriedAllFull.xs('2018',level='date')\n",
    "    wbQueried2017 = wbQueriedAllFull.xs('2017',level='date')\n",
    "    wbQueried2016 = wbQueriedAllFull.xs('2016',level='date')\n",
    "    wbQueried2015 = wbQueriedAllFull.xs('2015',level='date')\n",
    "except:\n",
    "    print('this data was read from the csv file, date index is an integer')\n",
    "    wbQueried2019 = wbQueriedAllFull.xs(2019,level='date')\n",
    "    wbQueried2018 = wbQueriedAllFull.xs(2018,level='date')\n",
    "    wbQueried2017 = wbQueriedAllFull.xs(2017,level='date')\n",
    "    wbQueried2016 = wbQueriedAllFull.xs(2016,level='date')\n",
    "    wbQueried2015 = wbQueriedAllFull.xs(2015,level='date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# wbQueried2017.fillna(wbQueried2016)\n",
    "\n",
    "# wbQueried2017\n",
    "# DENMARK BIRTH RATE SKILLSED HEALTH \n",
    "\n",
    "wbQueried2017 = wbQueriedAllFull.xs(2017,level='date')\n",
    "wbQueriedYear2017 = wbQueried2017.isnull().astype(int)\n",
    "\n",
    "# Replace all NON-Missing values (0) for the year that we encountered them \n",
    "# wbQueried2017IsNull.replace(0,int(2017),inplace=True)\n",
    "wbQueriedYear2017.replace(0,int(2017),inplace=True)\n",
    "\n",
    "# Replace all NULL values(evaluated as 1) for NAN\n",
    "# wbQueried2017IsNull.replace(1,np.nan,inplace=True)\n",
    "wbQueriedYear2017.replace(1,np.nan,inplace=True)\n",
    "\n",
    "\n",
    "# wbQueried2017IsNull = wbQueried2017IsNull.fillna(wbQueried2018)\n",
    "\n",
    "\n",
    "\n",
    "# wbQueriedYear2019 = wbQueriedAllFull.xs('2019',level='date')\n",
    "\n",
    "wbQueriedYear2019 = wbQueried2019.isnull().astype(int)\n",
    "wbQueriedYear2019.replace(0,int(2019),inplace=True)\n",
    "wbQueriedYear2019.replace(1,np.nan,inplace=True)\n",
    "\n",
    "# wbQueriedYear2018 = wbQueriedAllFull.xs('2018',level='date')\n",
    "\n",
    "wbQueriedYear2018 = wbQueried2018.isnull().astype(int)\n",
    "wbQueriedYear2018.replace(0,int(2018),inplace=True)\n",
    "wbQueriedYear2018.replace(1,np.nan,inplace=True)\n",
    "\n",
    "\n",
    "# wbQueried2016 = wbQueriedAllFull.xs('2016',level='date')\n",
    "\n",
    "wbQueriedYear2016 = wbQueried2016.isnull().astype(int)\n",
    "wbQueriedYear2016.replace(0,int(2016),inplace=True)\n",
    "wbQueriedYear2016.replace(1,np.nan,inplace=True)\n",
    "\n",
    "# wbQueried2019 = wbQueriedAllFull.xs('2016',level='date')\n",
    "\n",
    "wbQueriedYear2015 = wbQueried2015.isnull().astype(int)\n",
    "wbQueriedYear2015.replace(0,int(2015),inplace=True)\n",
    "wbQueriedYear2015.replace(1,np.nan,inplace=True)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "print('-' * 75,'\\n','First loop - Imputing missing values with original datapoints\\n', '-' * 75,'\\n')\n",
    "\n",
    "indexCounter = 0\n",
    "date = [2019,2018,2016,2015]\n",
    "\n",
    "for df in (wbQueried2019,wbQueried2018,wbQueried2016,wbQueried2015):\n",
    "    print(date[indexCounter],'\\nBefore filling NA: ',wbQueried2017.isnull().sum().sum())\n",
    "    \n",
    "    wbQueried2017 = wbQueried2017.fillna(df)\n",
    "    \n",
    "    print('After filling NA: ',wbQueried2017.isnull().sum().sum(),'\\n')\n",
    "    \n",
    "    indexCounter += 1\n",
    "\n",
    "\n",
    "print('-' * 75,'\\n','Second loop - Year items\\n', '-' * 75,'\\n')\n",
    "\n",
    "\n",
    "# Loop to replace each wbQueriedYearXXXX This is to have the most update year other than 2017 for each cell\n",
    "\n",
    "\n",
    "indexCounter = 0\n",
    "date = [2019,2018,2016,2015]\n",
    "\n",
    "for dataframe in (wbQueriedYear2019,wbQueriedYear2018,wbQueriedYear2016,wbQueriedYear2015):\n",
    "#     print(dataframe.isnull().sum().sum())\n",
    "#     print(date[indexCounter])\n",
    "    print(years,'\\nBefore filling NA: ',wbQueriedYear2017.isnull().sum().sum())\n",
    "    \n",
    "    wbQueriedYear2017 = wbQueriedYear2017.fillna(dataframe)\n",
    "    \n",
    "    print('After filling NA: ',wbQueriedYear2017.isnull().sum().sum(),'\\n')\n",
    "    indexCounter += 1\n",
    "\n",
    "    \n",
    "    # Original points dataset \n",
    "wbQueried2017.to_csv('wb_490NA_2019-2015.csv')\n",
    "\n",
    "   # Years dataset \n",
    "# wbQueriedYear2017.to_csv('wbQueriedYears.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Carolina"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib as plt\n",
    "import pandas as pd\n",
    "\n",
    "#number of missing values of the \"small countries\"\n",
    "print(wbSmallCountries)\n",
    "cells_no_info = wbSmallCountries.isnull().sum().sum()\n",
    "\n",
    "print(cells_no_info)\n",
    "\n",
    "#we want to create a DF of countries with their missing values.\n",
    "\n",
    "smallcountries_1 = wbSmallCountries.isnull().sum(axis=1)\n",
    "print(smallcountries_1)\n",
    "\n",
    "#Barchart from smallcountries_1 \n",
    "cc = smallcountries_1.plot.bar(x='country', y = '')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Talyah"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt \n",
    "import numpy as np \n",
    "import pandas as pd \n",
    "import seaborn as sns\n",
    "\n",
    "info = 'wbQueriedMostRecentData2013-2019_LargeData.csv'\n",
    "\n",
    "df_armed_forces = pd.read_csv(info)\n",
    "\n",
    "#Created a scatterplot for correlation between government spending and armed personnel using seaborn\n",
    "\n",
    "ax = sns.scatterplot(x ='Government expenditure on education, total (% of government expenditure)', y = 'Armed forces personnel (% of total labor force)', data = df_armed_forces, hue = 'country')\n",
    "\n",
    "ax.legend(loc='center left', bbox_to_anchor=(1.25, 0.5), ncol=1)\n",
    "\n",
    "ax.set_title('Gov\\' Spending vs. Armed Personnel')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "\n",
    "#Created a scatterplot for correlation between the poverty ratio and armed personnel using seaborn\n",
    "\n",
    "ax = sns.scatterplot(x ='Poverty headcount ratio at $3.20 a day (2011 PPP) (% of population)', y = 'Armed forces personnel (% of total labor force)', data = df_armed_forces, hue = 'country')\n",
    "\n",
    "ax.legend(loc='center left', bbox_to_anchor=(1.25, 0.5), ncol=1)\n",
    "\n",
    "ax.set_title('Poverty Ratio vs. Armed Personnel')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Elmir "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Diego"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "code_folding": [
     1
    ],
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD8CAYAAAB5Pm/hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAASP0lEQVR4nO3df4xl5X3f8feny1qkeGXjekz5aaIK4bGmAZMRdgRFXqdsYIuME1kpK8uh8VTrVHhjV05l3JGKEwuVKMWtDJHJxkuBikxS1SZBhRhWaCR3FP9glvJjydqBIizWi9iluIBlk+zib/+Ys/YwuXfnztz5Ac++X9LVPec5z3PO90qjz1w99/xIVSFJatc/WO8CJEmry6CXpMYZ9JLUOINekhpn0EtS4wx6SWrcokGf5Mwk00n2JXk8ySe79s8l+X6Sh7vX1j7jL0vy3SRPJrl2pT+AJOnYsth59ElOBU6tqoeSbAL2AB8Cfh34YVX9p2OM3QD8DXApsB94ENhWVX+9QvVLkhax6Df6qnq2qh7qll8G9gGnD7j/C4Enq+qpqvo74E+BK5dbrCRp6U5YSuckZwPvAb4FXAR8IslvALPAp6vqBwuGnA48M299P/DePvveDmwHOOmkk37xXe9611JKk6Tj2p49e56vqpFe2wYO+iRvBr4CfKqqXkryJeDzQHXvNwIfWzisx656zhVV1U5gJ8D4+HjNzs4OWpokHfeSfK/ftoHOukmykbmQv7OqvgpQVc9V1atV9RPgj5mbplloP3DmvPUzgAODFi5JGt4gZ90E2AXsq6ovzGs/dV63XwX29hj+IHBOkp9P8ibgKuDu4UqWJC3FIFM3FwEfBR5L8nDX9u+BbUnOZ24q5mng4wBJTgO+XFVbq+pIkk8A9wEbgFur6vEV/gySpGNYNOiraobec+339ul/ANg6b/3efn0lSavPK2MlqXEGvTSAqakpxsbG2LBhA2NjY0xNTa13SdLAlnQevXQ8mpqaYnJykl27dnHxxRczMzPDxMQEANu2bVvn6qTFLXoLhPXgefR6PRkbG+Omm25i8+bNP22bnp5mx44d7N3b62Qzae0l2VNV4z23GfTSsW3YsIFXXnmFjRs3/rTt8OHDnHjiibz66qvrWJn0M8cKeufopUWMjo4yMzPzmraZmRlGR0fXqSJpaQx6aRGTk5NMTEwwPT3N4cOHmZ6eZmJigsnJyfUuTRqIP8ZKizj6g+uOHTvYt28fo6OjXH/99f4QqzcM5+glqQHO0UvSccygl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0b5FGCZyaZTrIvyeNJPtm1/0GS7yR5NMldSd7aZ/zTSR5L8nAST46XpDU2yDf6I8Cnq2oUeB9wTZJ3A7uBsar6BeBvgM8eYx+bq+r8fifzS5JWz6JBX1XPVtVD3fLLwD7g9Kq6v6qOdN2+CZyxemVKkpZrSXP0Sc4G3gN8a8GmjwF/2WdYAfcn2ZNk+zH2vT3JbJLZQ4cOLaUsSdIxDBz0Sd4MfAX4VFW9NK99krnpnTv7DL2oqi4ALmdu2ueSXp2qamdVjVfV+MjIyMAfQJJ0bAMFfZKNzIX8nVX11XntVwNXAB+pPndHq6oD3ftB4C7gwmGLliQNbpCzbgLsAvZV1RfmtV8GfAb4YFX9qM/Yk5JsOroMbAF89pokraFBvtFfBHwU+EB3iuTDSbYCNwObgN1d2y0ASU5Lcm839hRgJskjwLeBe6rqayv/MSRJ/Sz64JGqmgHSY9O9PdqOTtVs7ZafAs4bpkBJ0nC8MlaSGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1LhBHiV4ZpLpJPuSPJ7kk13725LsTvJE935yn/FXd32e6J4xK0laQ4N8oz8CfLqqRoH3AdckeTdwLfBAVZ0DPNCtv0aStwHXAe9l7qHg1/X7hyBJWh2LBn1VPVtVD3XLLwP7gNOBK4Hbu263Ax/qMfxXgN1V9UJV/QDYDVy2EoVLkgazpDn6JGcD7wG+BZxSVc/C3D8D4B09hpwOPDNvfX/X1mvf25PMJpk9dOjQUsqSJB3DwEGf5M3AV4BPVdVLgw7r0Va9OlbVzqoar6rxkZGRQcuSJC1ioKBPspG5kL+zqr7aNT+X5NRu+6nAwR5D9wNnzls/Aziw/HIlSUs1yFk3AXYB+6rqC/M23Q0cPYvmauAvegy/D9iS5OTuR9gtXZskaY0M8o3+IuCjwAeSPNy9tgI3AJcmeQK4tFsnyXiSLwNU1QvA54EHu9fvdW2SpDWSqp5T5utqfHy8Zmdn17sMSXrDSLKnqsZ7bfPKWElqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhp3wmIdktwKXAEcrKqxru3PgHO7Lm8F/l9Vnd9j7NPAy8CrwJF+90qWJK2eRYMeuA24GbjjaENV/cujy0luBF48xvjNVfX8cguUJA1n0aCvqq8nObvXtu55sr8OfGBly5IkrZRh5+j/GfBcVT3RZ3sB9yfZk2T7sXaUZHuS2SSzhw4dGrIsSdJRwwb9NmDqGNsvqqoLgMuBa5Jc0q9jVe2sqvGqGh8ZGRmyLEnSUcsO+iQnAL8G/Fm/PlV1oHs/CNwFXLjc40mSlmeYb/T/HPhOVe3vtTHJSUk2HV0GtgB7hzieJGkZFg36JFPAN4Bzk+xPMtFtuooF0zZJTktyb7d6CjCT5BHg28A9VfW1lStdkjSIQc662dan/V/1aDsAbO2WnwLOG7I+SdKQvDJWkhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktS4QZ4wdWuSg0n2zmv7XJLvJ3m4e23tM/ayJN9N8mSSa1eycEnSYAb5Rn8bcFmP9v9cVed3r3sXbkyyAfhD4HLg3cC2JO8eplhJ0tItGvRV9XXghWXs+0Lgyap6qqr+DvhT4Mpl7EeSNIRh5ug/keTRbmrn5B7bTweembe+v2vrKcn2JLNJZg8dOjREWZKk+ZYb9F8C/glwPvAscGOPPunRVv12WFU7q2q8qsZHRkaWWZYkaaFlBX1VPVdVr1bVT4A/Zm6aZqH9wJnz1s8ADizneJKk5VtW0Cc5dd7qrwJ7e3R7EDgnyc8neRNwFXD3co4nSVq+ExbrkGQKeD/w9iT7geuA9yc5n7mpmKeBj3d9TwO+XFVbq+pIkk8A9wEbgFur6vFV+RSSpL5S1XfafN2Mj4/X7OzsepchSW8YSfZU1XivbV4ZK0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6glwYwNTXF2NgYGzZsYGxsjKmpqfUuSRrYonevlI53U1NTTE5OsmvXLi6++GJmZmaYmJgAYNu2betcnbQ4714pLWJsbIybbrqJzZs3/7RtenqaHTt2sHdvr0cxSGvvWHevNOilRWzYsIFXXnmFjRs3/rTt8OHDnHjiibz66qvrWJn0M96mWBrC6OgoMzMzr2mbmZlhdHR0nSqSlmbRoE9ya5KDSfbOa/uDJN9J8miSu5K8tc/Yp5M8luThJH5F1xvS5OQkExMTTE9Pc/jwYaanp5mYmGBycnK9S5MGMsiPsbcBNwN3zGvbDXy2e1zg7wOfBT7TZ/zmqnp+qCqldXT0B9cdO3awb98+RkdHuf766/0hVm8YiwZ9VX09ydkL2u6ft/pN4MMrW5b0+rJt2zaDXW9YKzFH/zHgL/tsK+D+JHuSbD/WTpJsTzKbZPbQoUMrUJYkCYYM+iSTwBHgzj5dLqqqC4DLgWuSXNJvX1W1s6rGq2p8ZGRkmLIkSfMsO+iTXA1cAXyk+pyjWVUHuveDwF3Ahcs9niRpeZYV9EkuY+7H1w9W1Y/69Dkpyaajy8AWwKtLJGmNDXJ65RTwDeDcJPuTTDB3Fs4mYHd36uQtXd/TktzbDT0FmEnyCPBt4J6q+tqqfApJUl+DnHXT61SDXX36HgC2dstPAecNVZ0kaWheGStJjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjBgr6JLcmOZhk77y2tyXZneSJ7v3kPmOv7vo80T1+UJK0hgb9Rn8bcNmCtmuBB6rqHOCBbv01krwNuA54L3PPi72u3z8ESdLqGCjoq+rrwAsLmq8Ebu+Wbwc+1GPorwC7q+qFqvoBsJu//w9DkrSKhpmjP6WqngXo3t/Ro8/pwDPz1vd3bZKkNbLoM2OHlB5t1bNjsh3YDnDWWWetZk0SAEmvP8/VUdXzz15aE8N8o38uyakA3fvBHn32A2fOWz8DONBrZ1W1s6rGq2p8ZGRkiLKkwVTVkl/v/Mz/XNY4aT0NE/R3A0fPorka+Isefe4DtiQ5ufsRdkvXJklaI4OeXjkFfAM4N8n+JBPADcClSZ4ALu3WSTKe5MsAVfUC8Hngwe71e12bJGmNDDRHX1Xb+mz65R59Z4F/PW/9VuDWZVUnSRqaV8ZKUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktS41b7XjbRmzvvd+3nxx4dX/ThnX3vPqu7/LT+3kUeu27Kqx9DxxaBXM1788WGevuFfrHcZQ1vtfyQ6/jh1I0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS45Yd9EnOTfLwvNdLST61oM/7k7w4r89/GL5kSdJSLPuCqar6LnA+QJINwPeBu3p0/V9VdcVyjyNJGs5KTd38MvB/qup7K7Q/SdIKWalbIFwFTPXZ9ktJHgEOAL9TVY/36pRkO7Ad4KyzzlqhsnQ82TR6Lf/09mvXu4yhbRoFeOPfykGvH0MHfZI3AR8EPttj80PAO6vqh0m2An8OnNNrP1W1E9gJMD4+XsPWpePPy/tu8F43Ug8rMXVzOfBQVT23cENVvVRVP+yW7wU2Jnn7ChxTkjSglQj6bfSZtknyj5OkW76wO97/XYFjSpIGNNTUTZJ/CFwKfHxe228BVNUtwIeBf5PkCPBj4KqqclpGktbQUEFfVT8C/tGCtlvmLd8M3DzMMSRJw/HKWElqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGrdSNzWTXhdauE/MW35u43qXoMYY9GrGWtzQ7Oxr72nixmk6vjh1I0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS44YO+iRPJ3ksycNJZntsT5IvJnkyyaNJLhj2mJKkwa3UBVObq+r5PtsuB87pXu8FvtS9S5LWwFpM3VwJ3FFzvgm8Ncmpa3BcSRIrE/QF3J9kT5LtPbafDjwzb31/1/YaSbYnmU0ye+jQoRUoS5IEKxP0F1XVBcxN0VyT5JIF29NjTP29hqqdVTVeVeMjIyMrUJYkCVYg6KvqQPd+ELgLuHBBl/3AmfPWzwAODHtcSdJghgr6JCcl2XR0GdgC7F3Q7W7gN7qzb94HvFhVzw5zXEnS4IY96+YU4K4kR/f1J1X1tSS/BVBVtwD3AluBJ4EfAb855DElSUswVNBX1VPAeT3ab5m3XMA1wxxHkrR8XhkrSY0z6CWpcQa9JDXOoJekxvlwcB23urPFlj7u95c+Zu6cBGl9GPQ6bhm+Ol44dSNJjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqXF6PF40kOQR8b73rkHp4O/D8ehch9fDOqur5HNbXZdBLr1dJZqtqfL3rkJbCqRtJapxBL0mNM+ilpdm53gVIS+UcvSQ1zm/0ktQ4g16SGmfQ67iWpJLcOG/9d5J8bh1LklacQa/j3d8Cv5bk7etdiLRaDHod744wdybNv124Ick7kzyQ5NHu/ayu/bYkX0zyV0meSvLheWP+XZIHuzG/u3YfQ+rPoJfgD4GPJHnLgvabgTuq6heAO4Evztt2KnAxcAVwA0CSLcA5wIXA+cAvJrlklWuXFmXQ67hXVS8BdwC/vWDTLwF/0i3/N+aC/ag/r6qfVNVfA6d0bVu61/8GHgLexVzwS+vqhPUuQHqd+C/MhfN/PUaf+Red/O285cx7/49V9UcrXJs0FL/RS0BVvQD8d2BiXvNfAVd1yx8BZhbZzX3Ax5K8GSDJ6UnesdK1Sktl0Es/cyNztyE+6reB30zyKPBR4JPHGlxV9zM31fONJI8B/wPYtEq1SgPzFgiS1Di/0UtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1Lj/D+v0WPRVXeQxAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def extractAllIndicators():\n",
    "    import world_bank_data as wb\n",
    "\n",
    "    # It's necessary to get the indicators code, this is different from the column names. \n",
    "        # E.g: Income share held by fourth 20% is coded as: SI.DST.04TH.20\n",
    "\n",
    "    missingIndicators = missingValuesByColumn[missingValuesByColumn >= 1].index.copy()\n",
    "\n",
    "\n",
    "    # Created empty dataframe with the column format that the API will return\n",
    "        # We just need to append in a simple loop\n",
    "    indicatorsCodedMissing = pd.DataFrame(columns = ['name', 'unit', 'source', 'sourceNote', 'sourceOrganization', 'topics'])\n",
    "\n",
    "\n",
    "    # Loop to get the missing indicators and store the in the indicatorsCodedMissing data frame\n",
    "    for i in list(missingIndicators):\n",
    "        indicatorsCodedMissing = indicatorsCodedMissing.append(wb.search_indicators(i))\n",
    "\n",
    "    # We can view the first the indicator names\n",
    "#     print(f'{indicatorsCodedMissing.index[0:3]} \\n')\n",
    "\n",
    "    # We can view the head of the dataframe as well, we have really interesting info! \n",
    "#     indicatorsCodedMissing.head()\n",
    "\n",
    "    # Shape of matrix \n",
    "#     indicatorsCodedMissing.shape\n",
    "\n",
    "    return indicatorsCodedMissing\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Big Countries names\n",
    "bigCountries = ['Austria','Belgium','Denmark',\n",
    "                'France','Germany','Iceland', \n",
    "                'Ireland', 'Italy', 'Luxembourg', \n",
    "                'Netherlands', 'Portugal', 'Spain', \n",
    "                'Switzerland','United Kingdom']\n",
    "\n",
    "\n",
    "# Read last data\n",
    "<<<<<<< local\n",
    "<<<<<<< local\n",
    "wbFullDiego = pd.read_csv('wbQueriedMostRecentData2013-2019.csv')\n",
    "wbFullDiego = pd.read_csv('wb_490NA_2019-2015.csv',)\n",
    "=======\n",
    "wbFullDiego = pd.read_csv('wb_490NA_2019-2015.csv')\n",
    ">>>>>>> remote\n",
    "=======\n",
    "wbFullDiego = pd.read_csv('wb_490NA_2019-2015.csv')\n",
    ">>>>>>> remote\n",
    "wbFullDiego.set_index('country', inplace = True) # We set the country column as an index\n",
    "\n",
    "# Small and big countries, how many missing values are there\n",
    "wbFullDiegoNA = wbFullDiego.isnull().sum()\n",
    "wbFullDiegoNA[wbFullDiegoNA >= 1].sort_values(ascending=False)\n",
    "\n",
    "\n",
    "# Big countries data set creation\n",
    "wbBigCountries = wbFullDiego.copy()\n",
    "wbBigCountries = wbBigCountries.loc[bigCountries,:]\n",
    "wbBigCountriesTranspose = wbBigCountries.transpose()\n",
    "# wbBigCountries = wbBigCountries[bigCountries].transpose()\n",
    "\n",
    "# Big countries Indicators Null values analysis, which indicators have at least 2 missing value?\n",
    "wbBigCountriesNull = wbBigCountries.isnull().sum()\n",
    "wbBigCountriesNull[wbBigCountriesNull >=2].sort_values(ascending = False)\n",
    "\n",
    "# Big countries have Null values, which countries have missing values?\n",
    "wbBigCountries.transpose().isnull().sum().plot(kind = 'box')\n",
    "wbBigCountries.transpose().isnull().sum().sort_values(ascending = False)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Small countries df creation\n",
    "wbSmallCountries = wbFullDiego.copy()\n",
    "wbSmallCountries = wbSmallCountries.drop(bigCountries)\n",
    "\n",
    "# Small countries null values, analysis, which countries have at least one value missing?\n",
    "\n",
    "wbSmallCountriesNull = wbSmallCountries.isnull().sum()\n",
    "# wbSmallCountries[wbSmallCountriesNull[wbSmallCountriesNull < 1].index] # countries that don't have any missing value\n",
    "\n",
    "# Missing values per country\n",
    "# wbSmallCountries.transpose().isnull().sum().sort_values()\n",
    "\n",
    "###############################################################\n",
    "# Inner join for topics, still pending\n",
    "# indicatorsCodedMissing = extractAllIndicators()\n",
    "# wbFullDiegoTranspose = wbFullDiego.transpose()\n",
    "# wbFullDiegoTranspose.columns = wbFullDiegoTranspose.iloc[0]\n",
    "\n",
    "# indicatorsCodedMissing.set_index('name', inplace = True)\n",
    "# indicatorsCodedMissing.join\n",
    "\n",
    "# wbBigCountries\n",
    "\n",
    "# wbBigCountriesNull[wbBigCountriesNull >=1].sort_values(ascending = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "\n",
    "\n",
    "\n",
    "# wbBigCountries\n",
    "# stats.ks_2samp(wbBigCountries['Prevalence of HIV, total (% of population ages 15-49)'].values, \n",
    "#                               wbBigCountries['Prevalence of HIV, total (% of population ages 15-49)'].values)\n",
    "\n",
    "wbBigCountriesBenchImputed = wbBigCountries.copy()\n",
    "wbBigCountriesBenchImputed = wbBigCountriesBenchImputed.drop(['Prevalence of underweight, weight for age (% of children under 5)',\n",
    "                                             'Poverty headcount ratio at national poverty lines (% of population)',\n",
    "                                             'Population living in slums (% of urban population)',\n",
    "                                             'Number of people pushed below the $3.10 ($ 2011 PPP) poverty line by out-of-pocket health care expenditure'\n",
    "                                             ], axis = 1)\n",
    "\n",
    "wbBigCountriesImputed = wbBigCountries.copy()\n",
    "wbBigCountriesImputed = wbBigCountriesImputed.drop(['Prevalence of underweight, weight for age (% of children under 5)',\n",
    "                                             'Poverty headcount ratio at national poverty lines (% of population)',\n",
    "                                             'Population living in slums (% of urban population)',\n",
    "                                             'Number of people pushed below the $3.10 ($ 2011 PPP) poverty line by out-of-pocket health care expenditure'\n",
    "                                             ], axis = 1)\n",
    "\n",
    "wbBigCountriesBenchImputed = wbBigCountriesBenchImputed.astype(float)\n",
    "wbBigCountriesImputed = wbBigCountriesImputed.astype(float)\n",
    "\n",
    "\n",
    "# wbCountriesImputed = wbCountriesImputed.reset_index()\n",
    "# wbCountriesImputed.interpolate(method ='spline',order = 2).isnull().sum().sum()\n",
    "\n",
    "for column in range(len(wbBigCountries.columns)):\n",
    "    pvalue,stati = stats.ks_2samp(wbBigCountries.iloc[:,column].values, \n",
    "                   wbBigCountries.iloc[:,column].values)\n",
    "# wb20132019 = pd.read_csv('wbQueriedMostRecentData2013-2019.csv') \n",
    "# wb490 = pd.read_csv('wbQueriedMostRecentData2013-2019.csv')\n",
    "\n",
    "\n",
    "# p,stati = stats.ks_2samp(wbBigCountries.iloc[:,0].values, wbBigCountries.iloc[:,0].values)\n",
    "\n",
    "# print(\n",
    "#     wbBigCountries.isnull().sum().sum(),\n",
    "#     wbCountriesImputed.interpolate(method ='linear', limit_direction ='forward').isnull().sum().sum())\n",
    "\n",
    "# pValuesLinear = []\n",
    "\n",
    "# for column in range(len(wbBigCountries.columns)):\n",
    "#     pvalue,stati = stats.ks_2samp(wbBigCountries.iloc[:,column].values, \n",
    "#                    wbCountriesImputed.interpolate(method ='linear', \n",
    "#                                                   limit_direction ='forward').iloc[:,column])\n",
    "    \n",
    "#     pValues.append(pvalue)\n",
    "    \n",
    "    \n",
    "pValuesMean = []\n",
    "\n",
    "for column in range(len(wbBigCountriesBenchImputed.columns)):\n",
    "#     print(column)\n",
    "    \n",
    "    stati,pvalue = stats.ks_2samp(wbBigCountriesBenchImputed.iloc[:,column].values, \n",
    "                       wbBigCountriesImputed.fillna(wbBigCountriesBenchImputed.mean()).iloc[:,column].values)\n",
    "#     print(wbBigCountriesImputed.columns[column],pvalue)\n",
    "    pValuesMean.append(pvalue)\n",
    "\n",
    "\n",
    "ksPvaluesDf = pd.DataFrame({'Indicators': wbBigCountriesImputed.columns, 'KS-PValues':pValuesMean})\n",
    "\n",
    "wbBigCountriesImputedMean = wbBigCountriesImputed.fillna(wbBigCountriesBenchImputed.mean())\n",
    "\n",
    "for colindex in range(wbBigCountriesImputedMean.shape[1]):\n",
    "    wbBigCountriesImputedMean.rename(columns =\n",
    "                                     {wbBigCountriesImputedMean.columns[colindex]: wbBigCountriesImputedMean.columns[colindex] + '_IMPUTEDMEAN'},\n",
    "                                     inplace = True\n",
    "                                    )\n",
    "\n",
    "\n",
    "\n",
    "# wbBigCountriesImputedMean['Educational attainment, at least completed upper secondary, population 25+, total (%) (cumulative)']\n",
    "pd.concat([wbBigCountriesBenchImputed,wbBigCountriesImputedMean], axis = 1).columns\n",
    "\n",
    "# ksPvaluesDf.set_index('Indicators',inplace=True)\n",
    "# ksPvaluesDf.sort_values(by = 'KS-PValues',\n",
    "#                         ascending=True)\n",
    "\n",
    "\n",
    "# ksPvaluesDf.loc['Educational attainment, at least completed upper secondary, population 25+, total (%) (cumulative)',:]\n",
    "\n",
    "# ksPvaluesDf.iloc[16,:]\n",
    "# print(mean(pValues))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "wbBigCountriesBenchImputedNull = wbBigCountriesBenchImputed.isnull().sum()\n",
    "wbBigCountriesBenchImputedNull[wbBigCountriesBenchImputedNull >=1].sort_values(ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Plots for Elmir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "<<<<<<< REMOTE CELL DELETED >>>>>>>\n",
    "<<<<<<< REMOTE CELL DELETED >>>>>>>\n",
    "\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "sns.set()\n",
    "\n",
    "\n",
    "liExpGdpPop = pd.read_csv('Life_E.csv',\n",
    "                          index_col=0,\n",
    "                          thousands=',')\n",
    "\n",
    "liExpGdpPop['Size'] =  'Small'\n",
    "\n",
    "liExpGdpPop.loc[bigCountries,'Size'] = 'Big' \n",
    "\n",
    "\n",
    "\n",
    "# plt.figure(figsize=(200,200))\n",
    "# g = sns.FacetGrid(hue = 'Size',data = liExpGdpPop)\n",
    "# g.map(plt.scatter, \"Life Expectancy\", \"GDP per capita\", alpha=.7)\n",
    "# plt.figure(figsize=(16, 6))\n",
    "# liExpGdpPop.boxplot( by = 'Size',figsize=(50,50))\n",
    "# liExpGdpPop.plot()\n",
    "\n",
    "sns.boxplot(hue = 'Size', x = 'Size', y = 'GDP per capita', data = liExpGdpPop)\n",
    "plt.show()\n",
    "sns.violinplot(hue = 'Size', x = 'Size', y = 'GDP per capita', data = liExpGdpPop)\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# sns.pairplot(data = liExpGdpPop,\n",
    "#              x_vars = ['Life Expectancy', 'GDP per capita', 'Population '],\n",
    "#              y_vars =  ['Life Expectancy', 'GDP per capita', 'Population '],\n",
    "#              hue = 'Size', palette = 'plasma')\n",
    "\n",
    "# li"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 'wb_490NA_2019-2015.csv'\n",
    "# wbQueriedMostRecentData2013-2019.csv\n",
    "wbFullDiego = pd.read_csv('wbQueriedMostRecentData2013-2019.csv')\n",
    "wbFullDiego.set_index('country', inplace = True)\n",
    "wbSmallCountries = wbFullDiego.copy()\n",
    "wbSmallCountries = wbSmallCountries.drop(bigCountries)\n",
    "wbSmallCountriesNull = wbSmallCountries.isnull().sum()\n",
    "wbSmallCountries[wbSmallCountriesNull[wbSmallCountriesNull < 1].index]\n",
    "\n",
    "\n",
    "# wbFullDiego"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": false,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "562.76px",
    "left": "1251.94px",
    "top": "52px",
    "width": "284.878px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "oldHeight": 541.96875,
   "position": {
    "height": "40px",
    "left": "727px",
    "right": "20px",
    "top": "65px",
    "width": "752.765625px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "varInspector_section_display": "none",
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
